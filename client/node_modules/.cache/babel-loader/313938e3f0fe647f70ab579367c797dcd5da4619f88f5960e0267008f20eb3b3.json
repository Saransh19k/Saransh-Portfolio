{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonam\\\\OneDrive\\\\Desktop\\\\Saransh Portfolio\\\\client\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setThemeState] = useState(() => {\n    // Check localStorage for saved theme preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'dark'; // Default to dark theme\n  });\n  const setTheme = newTheme => {\n    setThemeState(newTheme);\n    localStorage.setItem('theme', newTheme);\n\n    // Update document class\n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n      document.documentElement.classList.remove('light');\n    } else {\n      document.documentElement.classList.add('light');\n      document.documentElement.classList.remove('dark');\n    }\n  };\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n  useEffect(() => {\n    // Apply theme on mount\n    setTheme(theme);\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      if (!localStorage.getItem('theme')) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"FHO/6AYL1u6N256tDNj8FoPUGLo=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setThemeState","savedTheme","localStorage","getItem","window","matchMedia","matches","setTheme","newTheme","setItem","document","documentElement","classList","add","remove","toggleTheme","mediaQuery","handleChange","e","addEventListener","removeEventListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sonam/OneDrive/Desktop/Saransh Portfolio/client/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'dark' | 'light';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n  setTheme: (theme: Theme) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setThemeState] = useState<Theme>(() => {\r\n    // Check localStorage for saved theme preference\r\n    const savedTheme = localStorage.getItem('theme') as Theme;\r\n    if (savedTheme) {\r\n      return savedTheme;\r\n    }\r\n    \r\n    // Check system preference\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n    \r\n    return 'dark'; // Default to dark theme\r\n  });\r\n\r\n  const setTheme = (newTheme: Theme) => {\r\n    setThemeState(newTheme);\r\n    localStorage.setItem('theme', newTheme);\r\n    \r\n    // Update document class\r\n    if (newTheme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n      document.documentElement.classList.remove('light');\r\n    } else {\r\n      document.documentElement.classList.add('light');\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'dark' ? 'light' : 'dark');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Apply theme on mount\r\n    setTheme(theme);\r\n    \r\n    // Listen for system theme changes\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleChange = (e: MediaQueryListEvent) => {\r\n      if (!localStorage.getItem('theme')) {\r\n        setTheme(e.matches ? 'dark' : 'light');\r\n      }\r\n    };\r\n    \r\n    mediaQuery.addEventListener('change', handleChange);\r\n    \r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n\r\n  const value: ThemeContextType = {\r\n    theme,\r\n    toggleTheme,\r\n    setTheme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzF,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGT,UAAU,CAACK,YAAY,CAAC;EACxC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAYrB,OAAO,MAAMI,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3E,MAAM,CAACC,KAAK,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAQ,MAAM;IACnD;IACA,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAU;IACzD,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAClF,OAAO,MAAM;IACf;IAEA,OAAO,MAAM,CAAC,CAAC;EACjB,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAIC,QAAe,IAAK;IACpCR,aAAa,CAACQ,QAAQ,CAAC;IACvBN,YAAY,CAACO,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;;IAEvC;IACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;MACvBE,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC9CH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,OAAO,CAAC;IACpD,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;MAC/CH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBR,QAAQ,CAACR,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;EAC/C,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd;IACAoB,QAAQ,CAACR,KAAK,CAAC;;IAEf;IACA,MAAMiB,UAAU,GAAGZ,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMY,YAAY,GAAIC,CAAsB,IAAK;MAC/C,IAAI,CAAChB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;QAClCI,QAAQ,CAACW,CAAC,CAACZ,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;MACxC;IACF,CAAC;IAEDU,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IAEnD,OAAO,MAAMD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAuB,GAAG;IAC9BtB,KAAK;IACLgB,WAAW;IACXR;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,YAAY,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxB,QAAA,EACjCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5B,GAAA,CA9DWF,aAA2C;AAAA+B,EAAA,GAA3C/B,aAA2C;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}