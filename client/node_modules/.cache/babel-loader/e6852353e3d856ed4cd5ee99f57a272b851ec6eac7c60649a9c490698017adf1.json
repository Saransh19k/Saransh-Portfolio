{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nconst AnalyticsTracker = () => {\n  _s();\n  const location = useLocation();\n  useEffect(() => {\n    const trackPageView = async () => {\n      try {\n        const pageData = {\n          page: location.pathname,\n          referrer: document.referrer || '',\n          userAgent: navigator.userAgent,\n          screenResolution: `${window.screen.width}x${window.screen.height}`,\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        };\n        await fetch('/api/analytics/track', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(pageData)\n        });\n      } catch (error) {\n        // Silently fail - analytics tracking shouldn't break the app\n        console.error('Analytics tracking failed:', error);\n      }\n    };\n\n    // Track page view when location changes\n    trackPageView();\n  }, [location]);\n\n  // This component doesn't render anything\n  return null;\n};\n_s(AnalyticsTracker, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n_c = AnalyticsTracker;\nexport default AnalyticsTracker;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsTracker\");","map":{"version":3,"names":["useEffect","useLocation","AnalyticsTracker","_s","location","trackPageView","pageData","page","pathname","referrer","document","userAgent","navigator","screenResolution","window","screen","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","fetch","method","headers","body","JSON","stringify","error","console","_c","$RefreshReg$"],"sources":["C:/Users/sonam/OneDrive/Desktop/Saransh Portfolio/client/src/components/AnalyticsTracker.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst AnalyticsTracker: React.FC = () => {\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const trackPageView = async () => {\r\n      try {\r\n        const pageData = {\r\n          page: location.pathname,\r\n          referrer: document.referrer || '',\r\n          userAgent: navigator.userAgent,\r\n          screenResolution: `${window.screen.width}x${window.screen.height}`,\r\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n        };\r\n\r\n        await fetch('/api/analytics/track', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(pageData)\r\n        });\r\n      } catch (error) {\r\n        // Silently fail - analytics tracking shouldn't break the app\r\n        console.error('Analytics tracking failed:', error);\r\n      }\r\n    };\r\n\r\n    // Track page view when location changes\r\n    trackPageView();\r\n  }, [location]);\r\n\r\n  // This component doesn't render anything\r\n  return null;\r\n};\r\n\r\nexport default AnalyticsTracker; "],"mappings":";AAAA,SAAgBA,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG;UACfC,IAAI,EAAEH,QAAQ,CAACI,QAAQ;UACvBC,QAAQ,EAAEC,QAAQ,CAACD,QAAQ,IAAI,EAAE;UACjCE,SAAS,EAAEC,SAAS,CAACD,SAAS;UAC9BE,gBAAgB,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACC,KAAK,IAAIF,MAAM,CAACC,MAAM,CAACE,MAAM,EAAE;UAClEC,QAAQ,EAAEC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC;QACpD,CAAC;QAED,MAAMC,KAAK,CAAC,sBAAsB,EAAE;UAClCC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACtB,QAAQ;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;;IAED;IACAxB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;;EAEd;EACA,OAAO,IAAI;AACb,CAAC;AAACD,EAAA,CAjCID,gBAA0B;EAAA,QACbD,WAAW;AAAA;AAAA8B,EAAA,GADxB7B,gBAA0B;AAmChC,eAAeA,gBAAgB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}