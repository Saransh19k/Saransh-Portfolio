{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonam\\\\OneDrive\\\\Desktop\\\\Saransh Portfolio\\\\client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check for existing session on app load\n    const checkAuth = async () => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        try {\n          const response = await authAPI.getProfile();\n          if (response.success) {\n            const userData = response.data.user;\n            setUser({\n              id: userData.id.toString(),\n              email: userData.email,\n              role: userData.role,\n              name: `${userData.firstName} ${userData.lastName}`,\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              bio: userData.bio,\n              website: userData.website,\n              location: userData.location,\n              preferences: userData.preferences,\n              lastLoginAt: userData.lastLoginAt,\n              loginCount: userData.loginCount,\n              emailVerified: userData.emailVerified,\n              createdAt: userData.createdAt,\n              updatedAt: userData.updatedAt\n            });\n          }\n        } catch (error) {\n          console.error('Failed to get user profile:', error);\n          // Clear invalid token\n          localStorage.removeItem('authToken');\n          localStorage.removeItem('userData');\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      if (response.success) {\n        const userData = response.data.user;\n        const token = response.data.token;\n\n        // Store token\n        localStorage.setItem('authToken', token);\n\n        // Set user state\n        setUser({\n          id: userData.id.toString(),\n          email: userData.email,\n          role: userData.role,\n          name: `${userData.firstName} ${userData.lastName}`,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          bio: userData.bio,\n          website: userData.website,\n          location: userData.location,\n          preferences: userData.preferences,\n          lastLoginAt: userData.lastLoginAt,\n          loginCount: userData.loginCount,\n          emailVerified: userData.emailVerified,\n          createdAt: userData.createdAt,\n          updatedAt: userData.updatedAt\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const adminLogin = async (email, password, adminKey) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.adminLogin({\n        email,\n        password,\n        adminKey\n      });\n      if (response.success) {\n        const userData = response.data.user;\n        const token = response.data.token;\n\n        // Store token\n        localStorage.setItem('authToken', token);\n\n        // Set user state\n        setUser({\n          id: userData.id.toString(),\n          email: userData.email,\n          role: userData.role,\n          name: `${userData.firstName} ${userData.lastName}`,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          bio: userData.bio,\n          website: userData.website,\n          location: userData.location,\n          preferences: userData.preferences,\n          lastLoginAt: userData.lastLoginAt,\n          loginCount: userData.loginCount,\n          emailVerified: userData.emailVerified,\n          createdAt: userData.createdAt,\n          updatedAt: userData.updatedAt\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Admin login error:', error);\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Admin login failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authAPI.register(userData);\n      if (response.success) {\n        const newUser = response.data.user;\n        const token = response.data.token;\n\n        // Store token\n        localStorage.setItem('authToken', token);\n\n        // Set user state\n        setUser({\n          id: newUser.id.toString(),\n          email: newUser.email,\n          role: newUser.role,\n          name: `${newUser.firstName} ${newUser.lastName}`,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          bio: newUser.bio,\n          website: newUser.website,\n          location: newUser.location,\n          preferences: newUser.preferences,\n          lastLoginAt: newUser.lastLoginAt,\n          loginCount: newUser.loginCount,\n          emailVerified: newUser.emailVerified,\n          createdAt: newUser.createdAt,\n          updatedAt: newUser.updatedAt\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Signup error:', error);\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Signup failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call logout API\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      // Clear local state regardless of API call success\n      setUser(null);\n      setError(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('userData');\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isDeveloper: (user === null || user === void 0 ? void 0 : user.role) === 'developer',\n    login,\n    adminLogin,\n    signup,\n    logout,\n    loading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","checkAuth","token","localStorage","getItem","response","getProfile","success","userData","data","id","toString","email","role","name","firstName","lastName","bio","website","location","preferences","lastLoginAt","loginCount","emailVerified","createdAt","updatedAt","console","removeItem","login","password","setItem","_error$response","_error$response$data","message","adminLogin","adminKey","_error$response2","_error$response2$data","signup","register","newUser","_error$response3","_error$response3$data","logout","value","isAuthenticated","isDeveloper","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sonam/OneDrive/Desktop/Saransh Portfolio/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { authAPI } from '../utils/api';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  role: 'user' | 'developer';\r\n  name?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  bio?: string;\r\n  website?: string;\r\n  location?: string;\r\n  preferences?: any;\r\n  lastLoginAt?: string;\r\n  loginCount?: number;\r\n  emailVerified?: boolean;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  isDeveloper: boolean;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  adminLogin: (email: string, password: string, adminKey: string) => Promise<boolean>;\r\n  signup: (userData: { firstName: string; lastName: string; email: string; password: string }) => Promise<boolean>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check for existing session on app load\r\n    const checkAuth = async () => {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (token) {\r\n        try {\r\n          const response = await authAPI.getProfile();\r\n          if (response.success) {\r\n            const userData = response.data.user;\r\n            setUser({\r\n              id: userData.id.toString(),\r\n              email: userData.email,\r\n              role: userData.role,\r\n              name: `${userData.firstName} ${userData.lastName}`,\r\n              firstName: userData.firstName,\r\n              lastName: userData.lastName,\r\n              bio: userData.bio,\r\n              website: userData.website,\r\n              location: userData.location,\r\n              preferences: userData.preferences,\r\n              lastLoginAt: userData.lastLoginAt,\r\n              loginCount: userData.loginCount,\r\n              emailVerified: userData.emailVerified,\r\n              createdAt: userData.createdAt,\r\n              updatedAt: userData.updatedAt\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to get user profile:', error);\r\n          // Clear invalid token\r\n          localStorage.removeItem('authToken');\r\n          localStorage.removeItem('userData');\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<boolean> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await authAPI.login({ email, password });\r\n      \r\n      if (response.success) {\r\n        const userData = response.data.user;\r\n        const token = response.data.token;\r\n        \r\n        // Store token\r\n        localStorage.setItem('authToken', token);\r\n        \r\n        // Set user state\r\n        setUser({\r\n          id: userData.id.toString(),\r\n          email: userData.email,\r\n          role: userData.role,\r\n          name: `${userData.firstName} ${userData.lastName}`,\r\n          firstName: userData.firstName,\r\n          lastName: userData.lastName,\r\n          bio: userData.bio,\r\n          website: userData.website,\r\n          location: userData.location,\r\n          preferences: userData.preferences,\r\n          lastLoginAt: userData.lastLoginAt,\r\n          loginCount: userData.loginCount,\r\n          emailVerified: userData.emailVerified,\r\n          createdAt: userData.createdAt,\r\n          updatedAt: userData.updatedAt\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error: any) {\r\n      console.error('Login error:', error);\r\n      setError(error.response?.data?.message || 'Login failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const adminLogin = async (email: string, password: string, adminKey: string): Promise<boolean> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await authAPI.adminLogin({ email, password, adminKey });\r\n      \r\n      if (response.success) {\r\n        const userData = response.data.user;\r\n        const token = response.data.token;\r\n        \r\n        // Store token\r\n        localStorage.setItem('authToken', token);\r\n        \r\n        // Set user state\r\n        setUser({\r\n          id: userData.id.toString(),\r\n          email: userData.email,\r\n          role: userData.role,\r\n          name: `${userData.firstName} ${userData.lastName}`,\r\n          firstName: userData.firstName,\r\n          lastName: userData.lastName,\r\n          bio: userData.bio,\r\n          website: userData.website,\r\n          location: userData.location,\r\n          preferences: userData.preferences,\r\n          lastLoginAt: userData.lastLoginAt,\r\n          loginCount: userData.loginCount,\r\n          emailVerified: userData.emailVerified,\r\n          createdAt: userData.createdAt,\r\n          updatedAt: userData.updatedAt\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error: any) {\r\n      console.error('Admin login error:', error);\r\n      setError(error.response?.data?.message || 'Admin login failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signup = async (userData: { firstName: string; lastName: string; email: string; password: string }): Promise<boolean> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await authAPI.register(userData);\r\n      \r\n      if (response.success) {\r\n        const newUser = response.data.user;\r\n        const token = response.data.token;\r\n        \r\n        // Store token\r\n        localStorage.setItem('authToken', token);\r\n        \r\n        // Set user state\r\n        setUser({\r\n          id: newUser.id.toString(),\r\n          email: newUser.email,\r\n          role: newUser.role,\r\n          name: `${newUser.firstName} ${newUser.lastName}`,\r\n          firstName: newUser.firstName,\r\n          lastName: newUser.lastName,\r\n          bio: newUser.bio,\r\n          website: newUser.website,\r\n          location: newUser.location,\r\n          preferences: newUser.preferences,\r\n          lastLoginAt: newUser.lastLoginAt,\r\n          loginCount: newUser.loginCount,\r\n          emailVerified: newUser.emailVerified,\r\n          createdAt: newUser.createdAt,\r\n          updatedAt: newUser.updatedAt\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error: any) {\r\n      console.error('Signup error:', error);\r\n      setError(error.response?.data?.message || 'Signup failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Call logout API\r\n      await authAPI.logout();\r\n    } catch (error) {\r\n      console.error('Logout API error:', error);\r\n    } finally {\r\n      // Clear local state regardless of API call success\r\n      setUser(null);\r\n      setError(null);\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('userData');\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    isDeveloper: user?.role === 'developer',\r\n    login,\r\n    adminLogin,\r\n    signup,\r\n    logout,\r\n    loading,\r\n    error\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}